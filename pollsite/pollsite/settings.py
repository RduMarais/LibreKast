"""
Django settings for pollsite project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os


#### ENVIRONMENT SETTINGS

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# for docker deployment :
isDocker = os.getenv('IS_DOCKER', default=False)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default='3zaz_n48y63wv5xl(s9=zfrkixc-p10p1g^thb=eqs*=c3t0gp')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG",default=False)

ADMIN_URL = os.environ.get("ADMIN_URL",default='admin')
# Add DONT_SHOW_ADMIN env variable to remove the admin button
SHOW_ADMIN = not os.environ.get("DONT_SHOW_ADMIN",default=False)

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Add this variable to your env vars (ex : 'librekast.pour-info.tech')
if(os.environ.get("ALLOWED_HOSTS_LOCAL")):
    ALLOWED_HOSTS.append(os.environ.get("ALLOWED_HOSTS_LOCAL"))



#### APPLICATION SETTINGS

# migration to django > 3.2
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# For channels deploymment
ASGI_APPLICATION = 'pollsite.asgi.application'

# Application definition

INSTALLED_APPS = [
    'channels',
    'home.apps.HomeConfig',
    'poll.apps.PollConfig',
    'django_toggle_switch_widget',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'markdownfield',
    'adminsortable',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'pollsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'home.context_processors.base_context',
            ],
        },
    },
]

# LibreKast uses ASGI for channels (websockets support)

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



#### Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = BASE_DIR + "/lang",



#### Static and media

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    # BASE_DIR + "/static",
    # os.path.join(BASE_DIR, '/static'),
    # '/Users/romain/Stratus/info/server/tests_beekast/LibreKast/pollsite/static/',
]

# for testing only, can be omitted for deployment
if(DEBUG):
    STATIC_ROOT = '/Users/romain/Stratus/info/server/tests_beekast/LibreKast/pollsite/static/'
else:
    STATIC_ROOT = BASE_DIR + "/static"

# TODO place here the absolute path of the static files you serve
if(isDocker):
    STATIC_ROOT = './static/'

# media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = 'media/'

# For Markdown formatting
# TODO if needed to change before deployment
SITE_URL = "http://localhost"



#### Channels configuration

if(isDocker):
    channel_host = ('app-redis', 6379)
else:
    channel_host = ('127.0.0.1', str(os.environ.get("REDIS_PORT",default=6379)))

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [channel_host],
        },
    },
}



#### TWITCH & YOUTUBE API SETTINGS

# This char is the one that will trigger the parsing
# I recommend using '#', @ is for testing purposes
# on Youtube, "@" is for tagging people and "!"" for bots
INTERACTION_CHAR = "#" 
BOT_CHAR = "!" 

# Define how you want to specify that your message is sent by a bot on Twitch and Youtube
BOT_MSG_PREFIX = 'ðŸ¤– '
BOT_MSG_PREFIX_YOUTUBE_ENCODED = ':robot: '
REVOLUTION_AUTPLAY_HEADER = "Feature-Policy: autoplay 'self'"

# How many seconds between the automated messages 
# If you expect N people to show up in the stream, I recommend something like : 60*(4+100/N) seconds
PERIODIC_BOT_DELAY = 800

TWITCH_NICKNAME = 'LibreKast_Bot'

YOUTUBE_REDIRECT_URIS = ["http://localhost", "urn:ietf:wg:oauth:2.0:oob"]
YOUTUBE_AUTH_URI='https://accounts.google.com/o/oauth2/auth'
YOUTUBE_TOKEN_URI='https://accounts.google.com/o/oauth2/token'
# YOUTUBE_TOKEN_URI='https://accounts.google.com/o/oauth2/token'
YTAPI_SCOPES = ["https://www.googleapis.com/auth/youtube.readonly","https://www.googleapis.com/auth/youtube.force-ssl"]



#### SECURITY SETTINGS

# recommended security settings 
SOCKET_ENCRYPTION = True 
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE='Lax'
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SECURE = True
OAUTHLIB_INSECURE_TRANSPORT = False

if(os.environ.get("DISABLE_ENCRYPTION",default=False)):
    SOCKET_ENCRYPTION = False
    CSRF_COOKIE_HTTPONLY = False
    SESSION_COOKIE_SECURE = False
    OAUTHLIB_INSECURE_TRANSPORT = True

# for my prod environment, this follows the good practices
NGINX_PROXY = os.environ.get("NGINX_PROXY",default=False)
if(NGINX_PROXY):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

