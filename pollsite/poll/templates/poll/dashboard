{% extends "base_layout.html" %}

{% block title  %}Dashboard{% endblock  %}

{% block content  %}
<section class="text-center pb-2 mb-2" name="meeting_details">
	<h1 class="text-3xl text-center">Meeting Dashboard : {{ meeting.title }}</h1>
</section>
<div class="md:flex">
<section class="w-full md:w-1/2 body-font md:border md:border-blue-200" name="current-question">
	<div class="text-center" id="question-div">
		<div class="text-center m-2">
			<span id="current-question-id" class="text-2xl" name="current-question-id" value="">Current Question title</span>
		</div>
		<div>
			<div id="question-description" class="">Question description</div>
		</div>
	</div>
	<div class="container px-5 py-24 mx-auto text-center" id="start-div">
		<button id="question-start" value="question-start" class="bg-red-600 hover:bg-red-800 text-white text-center font-bold py-2 px-4 rounded">START</button>
	</div>
</section>
<section class="w-full md:w-1/4 body-font md:border md:border-red-200" name="meeting-plan-section">
	<div class="text-2xl text-center m-2" id="meeting-div">
		Meeting plan
	</div>
	<div class = "w-full items-center m-2 p-1">
		<table class="table-fixed border-separate border border-solid border-red-900 divide-solid divide-y-2 divide-x-2 divide-red-800 mx-auto text-center">
			<thead>
				<tr class="bg-red-300">
				  <th>Question</th>
				  <th>Type</th>
				  <th>Status</th>
				</tr>
			</thead>
			<tbody>
				{% for question in meeting.question_set.all %}
				<tr id="librekast-question-{{question.id}}">
				  <td>{{ question.title }}</td>
				  <td>
				  	{% if question.question_type == 'WC' %}Word Cloud{%endif%}
				  	{% if question.question_type == 'PL' %}Poll{%endif%}
				  	{% if question.question_type == 'QZ' %}Quizz{%endif%}
				  	{% if question.question_type == 'TX' %}Text Only{%endif%}
				  </td>
				  <td>
				  	<span id="librekast-question-status-{{question.id}}">
					  	{% if question.is_done %}&#9745;
					  	{% else %}&#9723;
					  	{%endif%}
				  	</span>
				  	<button id="librekast-question-go-{{question.id}}" class="bg-gray-300">&#9723;
				  	</button>
				  	<button id="librekast-question-results-{{question.id}}" class="bg-gray-300">&#9723;
				  	<button id="librekast-question-next-{{question.id}}" class="bg-gray-300">&#9723;
				  	</button>
				  </td>
				</tr>
				{% endfor %}
			</tbody>
		</table>
	</div>
	<div class="text-center text-sm m-1">&#9199; to start a question, &#128202; to show the results, &#9193; to go to next question.
	</div>
</section>
<section class="w-full md:w-1/4 body-font md:border md:border-green-200" name="scoreboard-section">
	<div class="text-center w-full m-2" id="scoreboard-div">
		<div class="basis-3/4 inline">
			<span class="text-2xl text-center p-2">Score Board</span>
		</div>
		<div class="basis-1/4 inline text-center">
			<span class="p-2" id="update-scoreboard-div">
			<button id="update-scoreboard" value="update-scoreboard" class="bg-green-600 hover:bg-green-800 text-white text-center font-bold rounded">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
				</svg>
			</button>
			</span>
		</div>
	</div>
	<div class = "w-full items-center m-2 p-2">
	<table class="table-auto border-separate border border-solid border-green-900 divide-solid divide-y-2 divide-x-2 divide-green-800 mx-auto text-center">
		<thead>
			<tr class="bg-green-300">
			  <th>Username</th>
			  <th>Score</th>
			</tr>
		</thead>
		<tbody id="scoreboard-tbody">
			<tr>
			  <td>User A</td>
			  <td>12</td>
			</tr>
			<tr>
			  <td>User B</td>
			  <td>8</td>
			</tr>
		</tbody>
	</table>
	</div>
</section>
</div>


{% endblock  %}

{% block javascript %}

<script>
	const meeting_id = {{ meeting.id }};
	const dashboardSocket = new WebSocket(
		'ws://'
		+ window.location.host
		+ '/ws/'
		+ meeting_id
		+ '/'
	);
	const choiceColors = ['blue','indigo','purple','pink','sky','violet'];
	var questionTitle = document.querySelector('#current-question-id');
	var questionDesc = document.querySelector('#question-description');
	var wordCloudData = [];
	var questionStatus ;

	function showWait(){
		questionTitle.innerText = "Next Activity is about to start...";
		questionDesc.innerHTML = "";
		document.querySelector('#question-content').remove();
		//TODO : clean 

	}

	function updateScoreboard(scoresArray){
		tableBody = document.querySelector('#scoreboard-tbody');
		tableBody.textContent =''; //clear previous rows
		for(i in scoresArray){
			let row = document.createElement('tr');
			let username = document.createElement('td');
			let userscore = document.createElement('td');
			username.innerText = scoresArray[i].name;
			userscore.innerText = scoresArray[i].score;
			userscore.id = 'librekast-userscore-'+scoresArray[i].id;
			row.appendChild(username);
			row.appendChild(userscore);
			tableBody.appendChild(row);
		}

	}

	function startQuestion(item){
		id = item.id.split('-')[3];
		// change button for stop button
		item.onclick = null;
		// item.removeEventListener("click",function(e) {startQuestion(e); },false);
		item.innerHTML = "&#9723;"; // blanck icon
		
		questionResults = document.querySelector('#librekast-question-results-'+id);
		questionResults.innerHTML = "&#128202;" //rsults icon
		questionResults.onclick = function(item_stop){stopQuestion(item_stop);};

		dashboardSocket.send(JSON.stringify({
			'message': "admin-question-start", //TODO
			'question_id':id,
		}))
	}

	function stopQuestion(item_stop){
		id = item_stop.target.id.split('-')[3];
		// change button for Next button
		questionNext = document.querySelector('#librekast-question-next-'+id);
		questionNext.innerHTML = "&#9193;"
		item_stop.target.onclick = null;
		questionNext.onclick = function(item_next){nextQuestion(item_next);}
		item_stop.target.innerHTML = "&#9723;"; //blank icon

		dashboardSocket.send(JSON.stringify({
			'message': "admin-question-results", //TODO
			'question_id':id,
		}))
	}

	function nextQuestion(item_next){
		id = item_next.target.id.split('-')[3];
		item_next.target.onclick = null;
		item_next.target.innerHTML = "&#9723;"; //blank icon

		// item_next = document.querySelector('#librekast-question-go-'+id);
		document.querySelector('#librekast-question-'+id).classList.remove('bg-red-200');
		document.querySelector('#librekast-question-status-'+id).innerHTML = '&#9745;';

		dashboardSocket.send(JSON.stringify({
			'message': "admin-question-next", //TODO
			'question_id':id,
		}))
		showWait();
	}

	function updateMeetingPlan(questionId){
		questionStatus = document.querySelector('#librekast-question-status-'+questionId);
		questionStatus.innerHTML = '&#9989;';
		document.querySelector('#librekast-question-'+questionId).classList.add('bg-red-200');
		questionGo = document.querySelector('#librekast-question-go-'+questionId);
		// questionGo.classList.remove('hidden');
		questionGo.innerHTML = "&#9199;";
		questionGo.onclick = function(item){startQuestion(questionGo);}
	}

	function showQuestionText(questionObj){
		questionTitle.textContent = questionObj['title'];
		questionTitle.value = questionObj['id'];
		questionTitle.classList.add('librekast-'+questionObj['type']);
		questionDesc.innerHTML = questionObj['desc'];
		if(questionObj['type'] === 'WC'){showWordCloud(questionObj);}
		else if(questionObj['type'] !== 'TX'){showChoices(questionObj['choices'])}
	}


	function showResultsPoll(resultsArray,total_votes){
		for(i in resultsArray){
			let choice = document.querySelector('#choice-'+resultsArray[i].id);
			choice.classList.remove("bg-blue-200");
			choice.classList.replace("text-blue-600","text-"+choiceColors[i]+"-900");
			choice.classList.add("relative","max-w-xl","overflow-hidden");
			choice.classList.remove("py-2");
			let back = document.createElement("div");
			back.id = "bar-background-"+resultsArray[i].id;
			back.className="w-full";
			back.classList.add("h-full","bg-"+choiceColors[i]+"-200","absolute");
			
			let bar = document.createElement("div");
			bar.id="bar-"+resultsArray[i].id;
			bar.className="h-full";
			bar.classList.add("bg-"+choiceColors[i]+"-400","relative","w-0","librekast-bar");
			percent = (resultsArray[i].votes / total_votes) *100 ;
			bar.style.width = percent + "%";
			bar.innerText = resultsArray[i].votes + " votes";
			
			choice.appendChild(back);
			choice.appendChild(bar);
		}
		let p = document.createElement("p");
		p.className = "mx-4";
		p.classList.add('my-4','text-center');
		p.innerText = total_votes+" votes";
		p.id = 'total-votes';
		document.querySelector("#question-content").appendChild(p);
	}

	function showResultsQuizz(resultsArray){
		// consider that the choices are still here
		for(i in resultsArray){
			// or could use array of choice elmts
			let choice = document.querySelector('#choice-'+resultsArray[i].id);
			if(resultsArray[i].isTrue){
				let s = document.createElement("span");
				s.innerHTML = "The answer was <b>"+resultsArray[i].text+"</b>";
				questionDesc.appendChild(s);
				choice.classList.replace('bg-blue-200','bg-green-300');
				choice.classList.replace('text-blue-600','text-green-600');
			}
			let c = document.createElement("span");
			c.className="text-xs";
			c.classList.add("px-4");
			c.innerText = resultsArray[i].votes + " votes";
			choice.appendChild(c);
		}
	}

	function updatePollPercentage(voteBar,totalCount){
		voteCount = parseInt(voteBar.innerText.split()[0]);
		percent = (voteCount / totalCount) *100 ;
		voteBar.style.width = percent+"%";
	}

	function updatePoll(voteId){
		let totalCountElmt = document.querySelector('#total-votes');
		let totalCount = parseInt(totalCountElmt.innerText.split()[0]);
		let voteBar = document.querySelector('#bar-'+voteId);
		voteCount = parseInt(voteBar.innerText.split()[0]);
		voteCount++;
		voteBar.innerText = voteCount + " votes";
		totalCount++;
		let choiceBars = document.getElementsByClassName('librekast-bar');
		[...document.getElementsByClassName("librekast-bar")].forEach(function(item){
			updatePollPercentage(item,totalCount);
		});
		totalCountElmt.innerText = totalCount + " votes";
	}

	function updateWordCloud(word){
		//updte value array
		let b = false;
		//if word exists
		let obj = wordCloudData.find((o, i) => {
    		if (o.x === word) {
        		o.value++;
        		b = true;
        		return true;
    		}
		});
		//add word to data if non existent
		if(!b){
			let n = {'x':word,'value':1};
			wordCloudData.push(n);
		}

		//remove old graph
		ocontent = document.querySelector('#question-content');
		ocontent.remove();
		//show ne graph
		ncontent = document.createElement("div");
		ncontent.id = "question-content";
		document.querySelector('#question-div').appendChild(ncontent);

		var chart = anychart.tagCloud(wordCloudData);
		chart.angles([0]);
		chart.container("question-content");
		chart.draw();
	}

	function showWordCloud(questionObj){
		// console.log('start WC');
		wordCloudData = questionObj['choices'];

		// show results
		content = document.createElement("div");
		content.id = "question-content";
		document.querySelector('#question-div').appendChild(content);
		console.log('created content');

		var chart = anychart.tagCloud(wordCloudData);
		chart.angles([0]);
		chart.container("question-content");
		chart.draw();
		console.log('WC drawn');
	}

	function showChoices(choicesArray){
		content = document.createElement("div");
		content.id = "question-content";
		content.classList.add("py-8"); 
		content.classList.add("px-2"); 
		content.style="";

		let l = document.createElement("ul");
		l.id="choice-table";
		content.appendChild(l);
		for(i in choicesArray){
			let c = document.createElement("li");
			c.innerText = choicesArray[i].text;
			c.id = 'choice-'+choicesArray[i].id;
			c.value = choicesArray[i].id;
			c.classList.add("bg-blue-200","hover:bg-blue-700","hover:text-white");
			c.classList.add("text-blue-600","text-center","py-2","px-4","my-2","rounded");
			c.classList.add("librekast-choice");
			content.children[0].appendChild(c);
		}
		document.querySelector('#question-div').appendChild(content);
	}

	// main fuction : receive messages
	dashboardSocket.onmessage = function(e) {
		const data = JSON.parse(e.data);
		// console.log('received : '+e.data);
		if(data['message']==='question-go'){
			showQuestionText(data['question']);
			// updateMeetingPlan(data['question'].id)
		} else if(data['message']==='current-question'){
			updateMeetingPlan(data['question'].id);
		} else if(data['message']==='results'){
			if(data['question_type']=='QZ'){showResultsQuizz(data['results']);}
			else if(data['question_type']=='PL'){showResultsPoll(data['results'],data['total']);}
		} else if(data['message']==='question-ready'){
			showWait();
		} else if(data['message']==='notify-update-poll'){
			updatePoll(data['vote']);
		}else if(data['message']==='question-close'){
			showWait();
		} else if(data['message']==='notify-update-cloud'){
			updateWordCloud(data['vote']);
		}else if(data['message']==='update-scoreboard'){
			updateScoreboard(data['scores']);
		}
		
	};

	dashboardSocket.onclose = function(e) {
	};


	// start function
	document.querySelector('#question-start').onclick = function(e) {
		const messageInputDom = document.querySelector('#question-start');
		const message = messageInputDom.value;
		dashboardSocket.send(JSON.stringify({
			'message': "admin-get-current-question", 
		}));
		//remove header
		const startDivNode = document.querySelector('#start-div');
		startDivNode.remove()
		showWait();
	};

	document.querySelector('#update-scoreboard').onclick = function(e) {
		dashboardSocket.send(JSON.stringify({
			'message': 'get-scoreboard', 
		}));
	}

</script>

{% endblock %}